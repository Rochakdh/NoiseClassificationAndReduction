import streamlit as st
import callbacks
import IPython.display as ipd
import sound
from classification import classify
import paths_src


st.title("Noise Classifier and Denoiser")
file = st.file_uploader("Choose File", type=["wav"])
print(file)
# st.markdown("""---""")

def deNoise(fileName):
    #browse
    try:
        st.audio(fileName, format='audio/wav')
        print (fileName.name)

        denoise_btn = st.button("Denoise",on_click = callbacks.on_click,args=(fileName.name,))

 
    #record
    except:
        st.audio(f'{fileName}/{paths_src.RECORDED_FILE_NAME}', format='audio/wav')
        # print (fileName)

        denoise_btn = st.button("Denoise",on_click = callbacks.on_click,args=(fileName,))

                   
    return denoise_btn

#align OR to center
col1, col2, col3 , col4, col5 = st.columns(5)
with col1:
    pass
with col2:
    pass
with col4:
    pass
with col5:
    pass
with col3 :
    st.subheader("$~$_\----OR\----_") 

#align Record button to center
col1, col2, col3 , col4, col5 = st.columns(5)
with col1:
    pass
with col2:
    pass
with col4:
    pass
with col5:
    pass
with col3 :
    record_btn = st.button('Record audio')      

st.markdown("""---""")

if record_btn:
    
    # recordedPath = "C:\\Users\\WINDROID\\Desktop\\recorded"
    with st.spinner(f'Recording for 5 seconds ....'):
        sound.record()
        st.success("Recording completed!")
        
        # denoise_btn = deNoise(recordedPath)
        file = paths_src.RECORDED_FOLDER_PATH
        st.session_state["file"] = file

        # if denoise_btn:
        #     st.audio("C:\\Users\\WINDROID\\Desktop\\output audio\\output.wav", format='audio/wav')
    


if 'file' in st.session_state:
    file = st.session_state.file


if file is not None:
    denoise_btn = deNoise(file)
    
    #path to the output file generated by implementer.py
    if denoise_btn:
        st.success("Denoising completed!")
        st.markdown("""---""")
        st.header("Noise Reduced Output:")
        # st.markdown("""---""")
        st.subheader(f"Noise is likely to be {classify(file)[0]}.")
        st.audio(f"{paths_src.OUTPUT_FOLDER_PATH}/{paths_src.OUTPUT_FILE_NAME}", format='audio/wav')
    

else:
    st.write("You may choose to upload a file or record your sound through microphone.")
