import streamlit as st
import callbacks
import IPython.display as ipd
import sound
import os


st.title("Noise Classifier and Denoiser")
file = st.file_uploader("Choose File", type=["wav"])

print(file)
st.markdown("""---""")
# start_record_btn = st.button("Start Recording")

def deNoiseBrowsed(fileName):
    # try:
        st.audio(fileName, format='audio/wav')
        print (fileName)
        denoise_btn = st.button("Denoise",on_click = callbacks.on_click,args=(fileName.name,))
        return denoise_btn
    # except:
    #     st.audio(f'{fileName}\\recordedFile.wav', format='audio/wav')
    #     # print (fileName)
    #     denoise_btn = st.button("Denoise",on_click = callbacks.on_click,args=(fileName,))
    #     return denoise_btn



if file is not None:
    
    denoise_btn = deNoiseBrowsed(file)
    #path to the output file generated by implementer.py
    if denoise_btn:
        st.audio("C:\\Users\\WINDROID\\Desktop\\output audio\\output.wav", format='audio/wav')
else:
    st.write("You can choose to upload a file or record your sound through microphone.")



def deNoiseRecorded(recordedPathHead, recordedPathTail):
    # try:
        st.audio(f'{recordedPathHead}\{recordedPathTail}', format='audio/wav')
        # print (fileName)
        denoise_btn = st.button("Denoise",on_click = callbacks.on_click,args=(recordedPathTail,))
        return denoise_btn

# if start_record_btn:
    # stop_record_btn = st.button("Stop Recording")
    # st.markdown("""---""")

if st.button('Record'):
    recordedPathHead, recordedPathTail = os.path.split("C:\\Users\\WINDROID\\Desktop\\recorded\\recordedFile.wav")
    with st.spinner(f'Recording for 5 seconds ....'):
        sound.record()
        print(recordedPathTail)
        print(recordedPathHead)
        deNoiseRecorded(recordedPathHead, recordedPathTail)
        

    st.success("Recording completed")



